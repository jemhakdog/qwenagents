from qwen_agent.tools.base import BaseTool, register_tool
from duckduckgo_search import DDGS, AsyncDDGS
import json,json5
@register_tool('my_news_searcher')
class MyNewsSearcher(BaseTool):
    description ='search for news articles on the internet'
    parameters = [
        {
            'name': 'keywords',
            'type': 'string',
            'description': 'The keywords to search for',
            'required': True
        },
        {
            'name': 'safesearch',
            'type': 'string',
            'description': 'The safesearch setting',
            'required': False
        },
        {
            'name': 'max_results',
            'type': 'int',
            'description': 'The maximum number of results',
            'required': False
        },
    ]

    def call(self, params: str, **kwargs) -> str:
        # `params` are the arguments generated by the LLM agent.
        keywords = json5.loads(params)['keywords']
        region = json5.loads(params).get('region', 'wt-wt')
        safesearch = json5.loads(params).get('safesearch', 'off')
        max_results = json5.loads(params).get('max_results', 20)

        results = DDGS().news(
            keywords=keywords,
            region=region,
            safesearch=safesearch,
            max_results=max_results,
        )

        return json.dumps(results)

    async def call_async(self, params: str, **kwargs) -> str:
        # `params` are the arguments generated by the LLM agent.
        keywords = json5.loads(params)['keywords']
        region = json5.loads(params).get('region', 'wt-wt')
        safesearch = json5.loads(params).get('safesearch', 'off')
        timelimit = json5.loads(params).get('timelimit', 'd')
        max_results = json5.loads(params).get('max_results', 10)

        results = await AsyncDDGS().anews(
            keywords=keywords,
            region=region,
            safesearch=safesearch,
            timelimit=timelimit,
            max_results=max_results,
        )

        return json.dumps(results)