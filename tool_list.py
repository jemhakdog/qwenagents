from duckduckgo_search import DDGS
import json
from qwen_agent.tools.base import BaseTool, register_tool
import urllib.parse
import json5
from playwright.sync_api import sync_playwright


@register_tool('my_image_gen')
class MyImageGen(BaseTool):
    description = 'AI painting (image generation) service, input text description, and return the image URL drawn based on text information.'
    parameters = [{
        'name': 'prompt',
        'type': 'string',
        'description': 'Detailed description of the desired image content, in English',
        'required': True
    }]

    def call(self, params: str, **kwargs) -> str:
        
        prompt = json5.loads(params)['prompt']
        prompt = urllib.parse.quote(prompt)
        return json5.dumps(
            {'image_url': f'https://image.pollinations.ai/prompt/{prompt}'},
            ensure_ascii=False)

@register_tool('my_search_tool')
class MySearchTool(BaseTool):
    description ='search for information in the internet'
    parameters = [
        {
            'name': 'query',
            'type': 'string',
            'description': 'The query to search for in the internet',
            'required': True
        },
        {
            'name': 'max_results',
            'type': 'int',
            'description': 'max number of results to return',
            'required': False
        },
    ]

    def call(self, params: str, **kwargs) -> str:
        query = json.loads(params)['query']
        max_results = json.loads(params).get('max_results', 5)
        results = DDGS().text(query, max_results=max_results)
        return json.dumps(results)

@register_tool('my_write_tool')
class MyWriteTool(BaseTool):
    description ='write data to a file'
    parameters = [
        {
            'name': 'data',
            'type': 'string',
            'description': 'The data to write to the file',
            'required': True
        },
        {
            'name': 'filename',
            'type': 'string',
            'description': 'The name of the file to write to',
            'required': True
        },
    ]

    def call(self, params: str, **kwargs) -> str:
        # `params` are the arguments generated by the LLM agent.
        data = json.loads(params)['data']
        filename = json.loads(params)['filename']
        with open(filename, 'w') as f:
            f.write(data)
        return json.dumps({'message': f'Data written to {filename} successfully'})

@register_tool('my_read_tool')
class MyReadTool(BaseTool):
    description ='read data from a file'
    parameters = [
        {
            'name': 'filename',
            'type': 'string',
            'description': 'The name of the file to read from',
            'required': True
        },
    ]

    def call(self, params: str, **kwargs) -> str:
        # `params` are the arguments generated by the LLM agent.
        filename = json.loads(params)['filename']
        try:
            with open(filename, 'r') as f:
                data = f.read()
            return json.dumps({'data': data})
        except FileNotFoundError:
            return json.dumps({'error': f'File {filename} not found'})
  


from qwen_agent.tools.base import BaseTool, register_tool
import webbrowser
import json, json5

@register_tool('web_browser')
class WebBrowser(BaseTool):
    description = 'Open a URL in the default web browser'
    parameters = [
        {
            'name': 'url',
            'type': 'string',
            'description': 'The URL to open',
            'required': True
        },
        {
            'name': 'new',
            'type': 'boolean',
            'description': 'Whether to open the URL in a new tab or window',
            'required': False
        }
    ]

    def call(self, params: str, **kwargs) -> str:
        # `params` are the arguments generated by the LLM agent.
        url = json5.loads(params)['url']
        new = json5.loads(params).get('new')

        if new:
            webbrowser.open_new(url)
        else:
            webbrowser.open(url)
        return json.dumps({'success': True})